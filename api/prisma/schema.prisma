generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @unique
  name               String
  password           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  email              String              @unique
  emeralds           Int                 @default(100)
  lives              Int                 @default(5)
  xp                 Int                 @default(0)
  /// the current active streaks, will increase or reset based on completing a lesson
  activeStreaks      Int                 @default(0)
  answers            Answer[]
  chats              Chat[]
  generationRequests GenerationRequest[]
  paths              LearningPath[]
  streaks            Streak[]
}

model GenerationRequest {
  id        String                @id @unique
  type      GenerationRequestType
  userId    String?
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  prompt    String?
  completed Boolean               @default(false)
  moduleId  String?
  module    Module?               @relation(fields: [moduleId], references: [id])
  user      User?                 @relation(fields: [userId], references: [id])
}

model Streak {
  id        String   @id @unique
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
}

model Analytics {
  id        String   @id @unique @default(cuid())
  name      String
  users     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LearningPath {
  id         String   @id @unique
  languageId String
  reason     String
  knowledge  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String?
  type       PathType @default(created)
  language   Language @relation(fields: [languageId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])
  modules    Module[]
}

model Module {
  id                 String              @id @unique @default(cuid())
  name               String
  learningPathId     String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  description        String?
  generationRequests GenerationRequest[]
  lessons            Lesson[]
  learningPath       LearningPath?       @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
}

model Lesson {
  id               String          @id @unique @default(cuid())
  name             String
  moduleId         String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  description      String?
  questionsCount   Int             @default(0)
  questionsStatus  QuestionsStatus @default(not_generated)
  completed        Boolean         @default(false)
  correctAnswers   Int             @default(0)
  endDate          DateTime?
  incorrectAnswers Int             @default(0)
  startDate        DateTime?
  module           Module?         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  questions        Question[]
}

model Question {
  id            String       @id @unique @default(cuid())
  lessonId      String?
  type          QuestionType
  options       String[]
  correctAnswer String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  question      Json[]
  instruction   String
  answers       Answer[]
  lesson        Lesson?      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Answer {
  id         String     @id @unique
  type       AnswerType
  questionId String?
  userId     String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  answer     String?
  question   Question?  @relation(fields: [questionId], references: [id])
  user       User?      @relation(fields: [userId], references: [id])
}

model Language {
  id                     String         @id @unique
  name                   String
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  /// The url of location where flag is located
  flagUrl                String         @unique
  /// flag url expire time
  flagUrlExpireTimestamp DateTime
  /// flag file key
  key                    String?
  chats                  Chat[]
  learningPaths          LearningPath[]
}

model Chat {
  id            String    @id
  name          String
  initialPrompt String?
  voiceId       String
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  languageId    String
  language      Language  @relation(fields: [languageId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
  voice         Voice     @relation(fields: [voiceId], references: [id])
  messages      Message[]
}

model Message {
  id        String        @id
  content   Json[]
  author    MessageAuthor @default(User)
  audioUrl  String?
  chatId    String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  chat      Chat?         @relation(fields: [chatId], references: [id])
}

model Voice {
  id          String        @id
  name        String
  accent      String?
  gender      String?
  description String?
  previewUrl  String
  provider    VoiceProvider @default(OpenAI)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  chats       Chat[]
}

enum GenerationRequestType {
  learning_path
  modules
  lessons
}

enum QuestionsStatus {
  not_generated
  generated
  generating
}

enum AnswerType {
  correct
  incorrect
}

enum QuestionType {
  sentence
  select_one
}

enum PathType {
  generated
  created
}

enum MessageAuthor {
  User
  Bot
}

enum VoiceProvider {
  OpenAI
  XILabs
}
