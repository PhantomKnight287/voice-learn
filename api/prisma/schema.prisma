// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @unique
  name     String
  email    String @unique
  password String

  lives    Int @default(5)
  emeralds Int @default(100)
  xp       Int @default(0)

  paths   LearningPath[]
  answers Answer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Analytics {
  id String @id @unique @default(cuid())

  name String

  users Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LearningPath {
  id String @id @unique

  language   Language @relation(fields: [languageId], references: [id])
  languageId String

  type PathType @default(created)

  reason    String
  knowledge String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  modules Module[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Module {
  id String @id @unique @default(cuid())

  name        String
  description String?

  lessons Lesson[]

  learningPath   LearningPath? @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  learningPathId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id String @id @unique @default(cuid())

  name        String
  description String?

  module   Module? @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId String?

  questions       Question[]
  questionsCount  Int             @default(0)
  questionsStatus QuestionsStatus @default(not_generated)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum QuestionsStatus {
  not_generated
  generated
  generating
}

model Question {
  id String @id @unique @default(cuid())

  lesson   Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String?

  question    Json[]
  instruction String

  answers Answer[]

  type QuestionType

  options String[]

  correctAnswer String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id String @id @unique

  type AnswerType

  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AnswerType {
  correct
  incorrect
}

enum QuestionType {
  sentence
  select_one
}

enum PathType {
  generated
  created
}

model Language {
  id      String @id @unique
  name    String
  /// The url of location where flag is located
  flagUrl String @unique

  /// flag url expire time
  flagUrlExpireTimestamp DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  learningPaths LearningPath[]
}
