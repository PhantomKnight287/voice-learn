generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @unique
  name          String
  password      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  email         String   @unique
  emeralds      Int      @default(100)
  lives         Int      @default(5)
  xp            Int      @default(0)
  avatarHash    String?
  /// the current active streaks, will increase or reset based on completing a lesson
  activeStreaks Int      @default(0)
  longestStreak Int      @default(0)

  tier Tiers @default(free)

  homeScreenTutorialShown Boolean @default(false)
  chatScreenTutorialShown Boolean @default(false)

  answers            Answer[]
  chats              Chat[]
  generationRequests GenerationRequest[]
  paths              LearningPath[]
  streaks            Streak[]
  uploads            Upload[]
  transactions       Transaction[]
  xpHistory          XP[]
}

model XP {
  id     String @id @unique @default(cuid())
  earned Int    @default(0)

  language   Language @relation(fields: [languageId], references: [id])
  languageId String

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Upload {
  id  String @id @unique
  key String @unique

  url String @unique

  messages Message[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  expiresAt DateTime
  updatedAt DateTime @updatedAt
}

model GenerationRequest {
  id        String                @id @unique
  type      GenerationRequestType
  userId    String?
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  prompt    String?
  completed Boolean               @default(false)
  moduleId  String?
  module    Module?               @relation(fields: [moduleId], references: [id])
  user      User?                 @relation(fields: [userId], references: [id])
}

model Streak {
  id        String   @id @unique
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
}

model Analytics {
  id        String   @id @unique @default(cuid())
  name      String
  users     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LearningPath {
  id String @id @unique

  languageId String
  language   Language @relation(fields: [languageId], references: [id])

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  reason    String
  knowledge String
  type      PathType @default(created)

  modules Module[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Module {
  id                 String              @id @unique @default(cuid())
  name               String
  learningPathId     String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  description        String?
  generationRequests GenerationRequest[]
  lessons            Lesson[]
  learningPath       LearningPath?       @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
}

model Lesson {
  id               String          @id @unique @default(cuid())
  name             String
  moduleId         String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  description      String?
  explanation      String?
  questionsCount   Int             @default(0)
  questionsStatus  QuestionsStatus @default(not_generated)
  completed        Boolean         @default(false)
  correctAnswers   Int             @default(0)
  endDate          DateTime?
  incorrectAnswers Int             @default(0)
  startDate        DateTime?
  module           Module?         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  xpPerQuestion    Int             @default(4)
  emeralds         Int             @default(1)
  questions        Question[]
}

model Question {
  id            String       @id @unique @default(cuid())
  type          QuestionType
  options       String[]
  correctAnswer String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  question      Json[]
  instruction   String
  answers       Answer[]
  lessons       Lesson[]
}

model Answer {
  id   String     @id @unique
  type AnswerType

  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  answer String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Language {
  id            String         @id @unique
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  /// The url of location where flag is located
  flagUrl       String         @unique
  /// flag file key
  key           String?
  chats         Chat[]
  learningPaths LearningPath[]

  XP XP[]
}

model Chat {
  id            String    @id
  name          String
  initialPrompt String?
  voiceId       String
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  languageId    String
  language      Language  @relation(fields: [languageId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
  voice         Voice     @relation(fields: [voiceId], references: [id])
  messages      Message[]
}

model Message {
  id           String        @id
  content      Json[]
  author       MessageAuthor @default(User)
  attachment   Upload?       @relation(fields: [attachmentId], references: [id])
  attachmentId String?

  audioDuration Int @default(10)

  chatId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat      Chat?    @relation(fields: [chatId], references: [id])
}

model Voice {
  id          String        @id
  name        String
  accent      String?
  gender      String?
  description String?
  previewUrl  String
  provider    VoiceProvider @default(OpenAI)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  chats       Chat[]

  tiers Tiers[] @default([free])
}

model Transaction {
  id               String @id @unique @default(cuid())
  purchaseToken    String @unique
  sku              String
  notificationType Int?

  completed Boolean         @default(false)
  type      TransactionType

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  userUpdated Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Tiers {
  epic
  premium
  free
}

enum TransactionType {
  one_time_product
  subscription
}

enum GenerationRequestType {
  learning_path
  modules
  lessons
}

enum QuestionsStatus {
  not_generated
  generated
  generating
}

enum AnswerType {
  correct
  incorrect
}

enum QuestionType {
  sentence
  select_one
}

enum PathType {
  generated
  created
}

enum MessageAuthor {
  User
  Bot
}

enum VoiceProvider {
  OpenAI
  XILabs
}
